<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 缓存管理-->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehcache"/>
	</bean>
	<!-- 自定义Realm 配置进行授权和认证的 Realm，要新增一个java类来实现，下面会有，class=包名.类名，init-methood是初始化的方法 -->
	<bean id="boxRealm" class="com.box.framework.security.SystemAuthorizingRealm" />
	
	<!--  配置 Shiro 的 SecurityManager Bean 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="boxRealm"/>
		<property name="rememberMeManager" ref="rememberMeManager"/>
		<property name="sessionManager" ref="sessionManager"/>
		<property name="cacheManager" ref="shiroCacheManager"/> 
	</bean>
	
	<!-- 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 相隔多久检查一次session的有效性   -->
	 	<property name="sessionValidationInterval" value="3600000"/>
	 	<!-- session 有效时间为一天 （毫秒单位）-->
		<property name="globalSessionTimeout" value="86400000"/>
	   	<property name="sessionDAO" ref="sessionDAO"/>
	   	<!-- session 监听，可以多个。 -->
	   	<property name="sessionListeners">
	       <list>
	           <ref bean="shiroSessionListener"/>
	       </list>
	   	</property>
	   	<!-- 间隔多少时间检查，不配置是60分钟 -->
	  	<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
	  	<!-- 是否开启 检测，默认开启 -->
	  	<property name="sessionValidationSchedulerEnabled" value="true"/>
	   	<!-- 是否删除无效的，默认也是开启 -->
	  	<property name="deleteInvalidSessions" value="true"/>
		<!-- 会话Cookie模板 -->
	   	<property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>
	
	<bean id="shiroSessionListener" class="org.apache.shiro.session.SessionListenerAdapter"/>
	
	<!-- 会话DAO -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="activeSessionCache"/>
		<property name="cacheManager" ref="shiroCacheManager"/>
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	
	<!-- 会话ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<property name="interval" value="3600000"/><!-- 单位MS -->
		<property name="sessionManager" ref="sessionManager"/>
	</bean>
	
	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="PDONE.SESSIONID"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="86400"/><!-- 单位S -->
	</bean>
	
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="604800"/><!-- 单位S -->
	</bean>

	<!-- rememberMe 管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
		<property name="cookie" ref="rememberMeCookie"/>
	</bean>


	<!-- Kickout Session  -->
	<bean id="kickoutSessionControlFilter" class="com.box.framework.security.filter.KickoutSessionControlFilter">
		<property name="cacheManager" ref="shiroCacheManager"/>
		<property name="sessionManager" ref="sessionManager"/>
		<property name="kickoutAfter" value="false"/>
		<property name="maxSession" value="1"/>
		<property name="kickoutUrl" value="/login?kickout=1"/>
	</bean>

	<!-- 基于Form表单的身份验证过滤器 -->
	<bean id="authcFilter" class="com.box.framework.security.UserFormAuthenticationFilter">
		<property name="usernameParam" value="userName"/>
		<property name="passwordParam" value="password"/>
		<property name="rememberMeParam" value="rememberMe"/>
		<property name="failureKeyAttribute" value="shiroLoginFailure"/>
	</bean>

	<bean id="jCaptchaValidateFilter" class="com.box.framework.captcha.JCaptchaValidateFilter">
		<property name="jcaptchaEbabled" value="true"/>
		<property name="jcaptchaParam" value="jcaptchaCode"/>
		<property name="failureKeyAttribute" value="shiroLoginFailure"/>
	</bean>


	<!-- Shiro过滤器 : 配置 ShiroFilter bean: 该 bean 的 id 必须和 web.xml 文件中配置的 shiro filter 的 name 一致 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 身份认证失败，则跳转到登录页面的配置 -->
		<property name="loginUrl" value="/login"/>
		<!-- 登陆成功跳转的页面，不配置跳转到/ -->
		<property name="successUrl" value="/main" /> 
		<!-- 权限认证失败，则跳转到指定页面 -->
		<property name="unauthorizedUrl" value="/login"/>
		<property name="filters">
			<map>
				<entry key="jcaptcha" value-ref="jCaptchaValidateFilter"/>
				<entry key="authc" value-ref="authcFilter"/>
				<entry key="kickout" value-ref="kickoutSessionControlFilter"/>
			</map>
		</property>
		<!-- Shiro连接约束配置,即过滤链的定义  具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截.-->
		<property name="filterChainDefinitions">
			<value>
			<!--/**=anon-->
				/jcaptcha*=anon 
				/login=jcaptcha,authc
				/register=anon
				<!-- /logout=logout 配置登出: 使用 logout 过滤器 -->
				/assets/**=anon<!-- 其他所有路径任何人都可以访问。 -->
				/favicon.ico=anon
				/**=kickout,user
			</value>
		</property>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
</beans> 